{% import 'helpers.j2' as h -%}
package main
{% set metrics = ctx.metrics %}
{%- set all_required_attrs = ctx.metrics | map(attribute="attributes") | flatten | required | unique(attribute="name") | sort(attribute="name") -%}

// Import the appropriate Grafana Foundation SDK packages
import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/grafana/grafana-foundation-sdk/go/cog"
	"github.com/grafana/grafana-foundation-sdk/go/common"
	"github.com/grafana/grafana-foundation-sdk/go/dashboard"
	{%- if metrics | selectattr("instrument", "equalto", "gauge") | list | length > 0 %}
	"github.com/grafana/grafana-foundation-sdk/go/gauge"
	{%- endif %}
	"github.com/grafana/grafana-foundation-sdk/go/prometheus"
	"github.com/grafana/grafana-foundation-sdk/go/resource"
	"github.com/grafana/grafana-foundation-sdk/go/timeseries"
)

func DashboardManifest(dash dashboard.Dashboard) resource.Manifest {
	return resource.Manifest{
		ApiVersion: "dashboard.grafana.app/v1beta1",
		Kind:       "Dashboard",
		Metadata: resource.Metadata{
			Name: *dash.Uid,
		},
		Spec: dash,
	}
}

func main() {
  prometheusDataSourceRef := dashboard.DataSourceRef{
	Type: cog.ToPtr("prometheus"),
    Uid:  cog.ToPtr("prometheus"),
  }

  // Define our dashboard as strongly typed code
  builder := dashboard.NewDashboardBuilder("{{ctx.root_namespace}}").
    Uid("{{ctx.root_namespace}}-dashboard").
	Tags([]string{"built-with-weaver"}).
	Refresh("5m").
	Time("now-1h", "now").
	Timezone(common.TimeZoneBrowser).
  {%- for attr in all_required_attrs %}
  WithVariable(
    dashboard.NewQueryVariableBuilder("{{ h.to_go_name(attr.name, ctx.root_namespace) }}").
      Datasource(prometheusDataSourceRef).
      IncludeAll(true).
      AllValue(".*").
      Query(dashboard.StringOrMap{
        String: cog.ToPtr(`label_values({{ attr.name }})`),
  })).
  {%- endfor -%}
	{%- for metric in metrics %}
	{%- if metric.instrument == "gauge" %}
	WithPanel(
		gauge.NewPanelBuilder().
			Title("{{metric.brief | replace('\n', '\\n') | replace('"', '\\"')}}").
			Datasource(prometheusDataSourceRef).
			WithTarget(
				prometheus.NewDataqueryBuilder().
					Expr(`sum({
                  "{{metric.metric_name}}"
									{%- for attr in metric.attributes | required %}
									, "{{attr.name}}"=~"${{ h.to_go_name(attr.name,ctx.root_namespace) }}"
									{%- endfor -%}
          }) by ({{ metric.attributes | required | map(attribute="name") | map('tojson') | join(',') }})`).
					Range().
					Format(prometheus.PromQueryFormatTimeSeries).
					LegendFormat("__auto"),
			),
	){% if not loop.last %}.{% endif %}
	{%- elif metric.instrument == "histogram" %}
	WithPanel(
		timeseries.NewPanelBuilder().
			Title("{{metric.brief | replace('\n', '\\n') | replace('"', '\\"')}}").
			Datasource(prometheusDataSourceRef).
      {%- for percentile in ['99','90','50'] %}
			WithTarget(
				prometheus.NewDataqueryBuilder().
					Expr(`histogram_quantile(0.{{percentile}}, sum(
							rate({
                "{{metric.metric_name}}_bucket"
                {%- for attr in metric.attributes | required %}
                , "{{attr.name}}"=~"${{ h.to_go_name(attr.name,ctx.root_namespace) }}"
                {%- endfor -%}
              }[$__rate_interval])
						) by (le,{{ metric.attributes | required | map(attribute="name") | map('tojson') | join(',') }}))`).
					Range().
					Format(prometheus.PromQueryFormatTimeSeries).
					LegendFormat("p{{ percentile }}{% for attr in metric.attributes | required %} - {{ '{{' }}{{ attr.name }}{{ '}}' }} {%- endfor-%}"),
			).
      {%- endfor %}
			WithTarget(
				prometheus.NewDataqueryBuilder().
					Expr(`sum(rate({
								"{{metric.metric_name}}_sum"
								 {%- for attr in metric.attributes | required %}
								 , "{{attr.name}}"=~"${{ h.to_go_name(attr.name,ctx.root_namespace) }}"
								 {%- endfor -%}
              }[$__rate_interval])) by ({{ metric.attributes | required | map(attribute="name") | map('tojson') | join(',') }})
              /
              sum(rate({
                "{{metric.metric_name}}_count"
								 {%- for attr in metric.attributes | required %}
								 , "{{attr.name}}"=~"${{ h.to_go_name(attr.name,ctx.root_namespace) }}"
								 {%- endfor -%}
              }[$__rate_interval])) by ({{ metric.attributes | required | map(attribute="name") | map('tojson') | join(',') }})`).
					Range().
					Format(prometheus.PromQueryFormatTimeSeries).
					LegendFormat("average {{ percentile }}{% for attr in metric.attributes | required %} - {{ '{{' }}{{ attr.name }}{{ '}}' }} {%- endfor-%}"),
			),
	){% if not loop.last %}.{% endif %}
	{%- elif metric.instrument == "updowncounter" %}
	WithPanel(
		timeseries.NewPanelBuilder().
			Title("{{metric.brief | replace('\n', '\\n') | replace('"', '\\"')}}").
			Datasource(prometheusDataSourceRef).
			WithTarget(
				prometheus.NewDataqueryBuilder().
					Expr(`sum({
            "{{metric.metric_name}}"
						 {%- for attr in metric.attributes | required %}
						 , "{{attr.name}}"=~"${{ h.to_go_name(attr.name,ctx.root_namespace) }}"
						 {%- endfor -%}
          }) by ({{ metric.attributes | required | map(attribute="name") | map('tojson') | join(',') }})`).
					Range().
					Format(prometheus.PromQueryFormatTimeSeries).
					LegendFormat("__auto"),
			),
	){% if not loop.last %}.{% endif %}
	{%- else %}
	WithPanel(
		timeseries.NewPanelBuilder().
			Title("{{metric.brief | replace('\n', '\\n') | replace('"', '\\"')}}").
			Datasource(prometheusDataSourceRef).
			WithTarget(
				prometheus.NewDataqueryBuilder().
					Expr(`sum(rate({
            "{{metric.metric_name }}",
						 {%- for attr in metric.attributes | required %}
						 , "{{attr.name}}"=~"${{ h.to_go_name(attr.name,ctx.root_namespace) }}"
						 {%- endfor -%}
          }[$__rate_interval])) by ({{ metric.attributes | required | map(attribute="name") | map('tojson') | join(',') }})`).
					Range().
					Format(prometheus.PromQueryFormatTimeSeries).
					LegendFormat("__auto"),
			),
	){% if not loop.last %}.{% endif %}
	{%- endif %}
	{%- endfor %}

  // Build the dashboard - errors in configuration will be thrown here
  dashboard, err := builder.Build()
  if err != nil {
    log.Fatalf("failed to build dashboard: %v", err)
  }

  // Output the generated dashboard as JSON
  dashboardJson, err := json.MarshalIndent(DashboardManifest(dashboard), "", "  ")
  if err != nil {
    log.Fatalf("failed to marshal dashboard: %v", err)
  }
  fmt.Println(string(dashboardJson))
}
